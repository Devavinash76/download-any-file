import 'dart:io';
import 'package:get/get.dart';
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';
import 'package:flutter_file_downloader/flutter_file_downloader.dart';
import 'package:path_provider/path_provider.dart';

class SingleDownloadScreen extends StatefulWidget {
  const SingleDownloadScreen({
    Key? key,
  }) : super(key: key);

  @override
  State<SingleDownloadScreen> createState() => _SingleDownloadScreenState();
}

class _SingleDownloadScreenState extends State<SingleDownloadScreen> {
  TextEditingController url = TextEditingController();
  double? _progress;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Text(
              'Download Any File From URL\nin Flutter',
              style: TextStyle(
                fontSize: 20,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(
              height: 20,
            ),
            TextField(
              controller: url,
              decoration: const InputDecoration(label: Text('Url*')),
            ),
            const SizedBox(height: 16),
            _progress != null
                ? const CircularProgressIndicator()
                : ElevatedButton(
                    onPressed: () {
                      // downloadFile(url);
                      FileDownloader.downloadFile(
                          url:
                              url,
                          onProgress: (name, progress) {
                            setState(() {
                              _progress = progress;
                            });
                          },
                          onDownloadCompleted: (value) {
                            print('path  $value ');
                            setState(() {
                              _progress = null;
                              Get.back();
                            });
                          });
                    },
                    child: const Text('Download')),
          ],
        ),
      ),
    );
  }

  Future<void> downloadFile(String url) async {
    try {
      // Get the application documents directory
      String dir = (await getApplicationDocumentsDirectory()).path;

      // Extract the file name from the URL
      String fileName = url.split('/').last;

      // Create the file path
      String filePath = '$dir/MuPlayer';

      // Check if the file already exists
      File file = File(filePath);
      if (await file.exists()) {
        // If the file exists, return without downloading again
        print('File already exists at $filePath');
        return;
      }

      // Send a GET request to the URL
      var response = await http.get(Uri.parse(url));

      // Check if the response is successful
      if (response.statusCode == 200) {
        // Write the file to the application documents directory
        await file.writeAsBytes(response.bodyBytes);
        print('File downloaded to $filePath');
      } else {
        // Handle any errors during the HTTP request
        print('Failed to download file: ${response.statusCode}');
      }
    } catch (e) {
      // Handle any exceptions that occur during the process
      print('Error downloading file: $e');
    }
  }
}
